var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp2;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import ReactDOM from 'react-dom';

var ReactHtml = (_temp2 = _class = function (_React$PureComponent) {
  _inherits(ReactHtml, _React$PureComponent);

  function ReactHtml() {
    var _temp, _this, _ret;

    _classCallCheck(this, ReactHtml);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.state = {
      rendered: null,
      isFirstRender: false
    }, _this.renderDom = function () {
      // exit early for server-side rendered applications
      if (typeof window === 'undefined' || !_this.renderTarget) {
        return;
      }

      var _this$props = _this.props,
          html = _this$props.html,
          componentMap = _this$props.componentMap,
          componentAttribute = _this$props.componentAttribute,
          propsAttribute = _this$props.propsAttribute;

      // render the html passed in props to the target element

      if (document.createRange) {
        // empty renderTarget before appending new fragment
        while (_this.renderTarget.firstChild) {
          _this.renderTarget.removeChild(_this.renderTarget.firstChild);
        }

        var range = document.createRange();
        range.setStart(_this.renderTarget, 0);
        _this.renderTarget.appendChild(range.createContextualFragment(html));
      } else {
        _this.renderTarget.innerHTML = html;
      }

      // iterate over all elements that match our componentAttribute
      // ie `<div data-react-component>`
      var rendered = Array.from(_this.renderTarget.querySelectorAll('[' + componentAttribute + ']')).map(function (node) {
        var component = componentMap[node.getAttribute(componentAttribute)];
        var props = _this.parseStringProps(node.getAttribute(propsAttribute));
        var element = React.createElement(component, props);

        // render the newly created element into the subtree
        return ReactDOM.createPortal(element, node);
      });

      _this.setState({
        rendered: rendered,
        isFirstRender: true
      });
    }, _this.parseStringProps = function (componentProps) {
      var _this$props2 = _this.props,
          html = _this$props2.html,
          componentMap = _this$props2.componentMap,
          componentAttribute = _this$props2.componentAttribute,
          propsAttribute = _this$props2.propsAttribute,
          contextWrapper = _this$props2.contextWrapper,
          additionalProps = _objectWithoutProperties(_this$props2, ['html', 'componentMap', 'componentAttribute', 'propsAttribute', 'contextWrapper']);

      if (!componentProps) {
        return additionalProps;
      }

      var props = void 0;

      try {
        props = JSON.parse(componentProps);
      } catch (error) {
        console.warn('Error parsing data-react-props', componentProps);
      }

      return _extends({}, props, additionalProps);
    }, _this.renderToStaticMarkup = function () {
      // We do not need to render to static markup on the client
      if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
        return null;
      }

      var ReactDOMServer = require('react-dom/server');
      var cheerio = require('cheerio');

      var _this$props3 = _this.props,
          html = _this$props3.html,
          componentAttribute = _this$props3.componentAttribute,
          propsAttribute = _this$props3.propsAttribute,
          componentProps = _this$props3.componentProps,
          componentMap = _this$props3.componentMap,
          contextWrapper = _this$props3.contextWrapper,
          onServerRender = _this$props3.onServerRender;

      // parse the raw html with cheerio

      var $ = cheerio.load(html);

      $('[' + componentAttribute + ']').each(function (i, element) {
        var component = componentMap[element.attribs[componentAttribute]];
        var props = _this.parseStringProps(element.attribs[propsAttribute]);

        var reactElement = React.createElement(component, props);

        // If context is required, this component must receive all applicable
        // providers as a wrapper component through props.
        // example: <ReactHTML contextWrapper={(props) => <StaticRouter {...props} />} />
        if (contextWrapper) {
          reactElement = React.createElement(contextWrapper, null, reactElement);
        }

        var reactHtml = ReactDOMServer.renderToStaticMarkup(reactElement);

        // replace the placeholder element with the rendered html
        $(element).replaceWith(reactHtml);
      });

      if (onServerRender) {
        onServerRender($);
      }

      return $('body').html();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  ReactHtml.prototype.componentDidMount = function componentDidMount() {
    this.renderDom();
  };

  ReactHtml.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    if (this.props.html !== prevProps.html) {
      this.renderDom();
    }

    if (this.state.isFirstRender && this.props.afterFirstRender) {
      this.props.afterFirstRender();
      this.setState({ isFirstRender: false });
    }
  };

  ReactHtml.prototype.componentWillUnmount = function componentWillUnmount() {
    while (this.renderTarget.firstChild) {
      this.renderTarget.removeChild(this.renderTarget.firstChild);
    }
  };

  ReactHtml.prototype.render = function render() {
    var _this2 = this;

    var staticMarkup = this.renderToStaticMarkup();

    var divProps = {};

    if (staticMarkup) {
      divProps.dangerouslySetInnerHTML = { __html: staticMarkup };
    }

    return React.createElement(
      React.Fragment,
      null,
      React.createElement('div', _extends({
        ref: function ref(element) {
          _this2.renderTarget = element;
        }
      }, divProps)),
      this.state.rendered
    );
  };

  return ReactHtml;
}(React.PureComponent), _class.defaultProps = {
  componentAttribute: 'data-react-component',
  propsAttribute: 'data-react-props'
}, _temp2);
export { ReactHtml as default };